<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sun, 02 Oct 2022 15:32:33 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: davegithub</title>
		<dateCreated>Sun, 26 Nov 2017 14:07:30 GMT</dateCreated>
		<dateModified>Sun, 02 Oct 2022 15:32:33 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 4, 5, 11, 12, 31</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>101</windowTop>
		<windowLeft>743</windowLeft>
		<windowBottom>1078</windowBottom>
		<windowRight>2144</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/davegithub/">
			<outline text="readme.md">
				<outline text="# github">
					<outline text="Read and write files to a GitHub repository."/>
					</outline>
				<outline text="### Updates">
					<outline text="#### 10/2/22 by DW" created="Sun, 02 Oct 2022 14:35:26 GMT">
						<outline text="When I integrated the new queued github writer with the big app I'm working on it failed to upload the files. After much debugging this is what the problem was:" created="Sun, 02 Oct 2022 14:35:27 GMT">
							<outline text="1. The files it was uploading already existed. " created="Sun, 02 Oct 2022 14:37:16 GMT"/>
							<outline text="2. The GET call that the upload needs to do was getting rate-limited." created="Sun, 02 Oct 2022 14:37:28 GMT"/>
							<outline text="3. But you can increase the rate-limit by authenticating." created="Sun, 02 Oct 2022 14:37:52 GMT"/>
							<outline text="4. Since the upload functionality has to authenticate, I had prior art to copy, so if the request to get the file has a username and password in the options table, we do authenticate." created="Sun, 02 Oct 2022 14:38:04 GMT"/>
							<outline text="5. It worked. ;-)" created="Sun, 02 Oct 2022 14:38:50 GMT"/>
							</outline>
						<outline text="&lt;a href=&quot;https://github.com/scripting/uploadFolderToGitHub&quot;&gt;Here's the app I used&lt;/a&gt;, good example code for davegithub." created="Sun, 02 Oct 2022 15:31:23 GMT"/>
						</outline>
					<outline text="#### 10/1/22 by DW" created="Sat, 01 Oct 2022 15:47:06 GMT">
						<outline text="New option when uploading a file -- flUseQueue, if true we make sure they run one after the other, because that's how the GH server likes it." created="Sat, 01 Oct 2022 15:47:10 GMT"/>
						<outline text="Bumped the version to 0.5.0 because this is a fairly big feature and it's worth boasting about a bit. No breakage! :-)" created="Sat, 01 Oct 2022 15:48:23 GMT"/>
						</outline>
					<outline text="#### 5/4/21 by DW" created="Tue, 04 May 2021 15:20:03 GMT">
						<outline text="Added getDirectory function." created="Tue, 04 May 2021 15:20:17 GMT"/>
						</outline>
					<outline text="#### 12/10/20 by DW">
						<outline text="This is when GH's &lt;a href=&quot;https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api/&quot;&gt;deprecation warnings&lt;/a&gt; caught uip with me. The script that uploads bits from scripting.com to the &lt;a href=&quot;https://github.com/scripting/Scripting-News/tree/master/blog&quot;&gt;Scripting-News repo&lt;/a&gt; stopped working 27 days ago. Now I want to figure out what to do to get it working again. ">
							<outline text="1. I generated a &lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token&quot;&gt;personal access token&lt;/a&gt; and saved it in config.json as the password in the example app. "/>
							<outline text="2. I updated the code in davegithub to send the username and password via Basic Auth."/>
							</outline>
						<outline text="It worked. "/>
						</outline>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{ ">
					<outline text="&quot;name&quot;: &quot;davegithub&quot;, "/>
					<outline text="&quot;description&quot;: &quot;Read and write files to a GitHub repository.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.5.3&quot;,"/>
					<outline text="&quot;main&quot;: &quot;davegithub.js&quot;,"/>
					<outline text="&quot;scripts&quot;: {">
						<outline text="&quot;start&quot;: &quot;node davegithub.js&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;davegithub.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot; : &quot;git&quot;,"/>
						<outline text="&quot;url&quot; : &quot;https://github.com/scripting/github.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: { ">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="davegithub.js">
				<outline text="var myVersion = &quot;0.5.3&quot;, myProductName = &quot;davegithub&quot;;  " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text=""/>
				<outline text="exports.getFile = getFile; "/>
				<outline text="exports.uploadFile = uploadFile; "/>
				<outline text="exports.getDirectory = getDirectory; "/>
				<outline text="" created="Sat, 01 Oct 2022 15:49:11 GMT"/>
				<outline text="var uploadQueue = new Array (); //10/1/22 by DW" created="Sat, 01 Oct 2022 15:15:34 GMT"/>
				<outline text="var ctCurrentUploads = 0;"/>
				<outline text="var idQueueThread = undefined;"/>
				<outline text="" created="Sat, 01 Oct 2022 15:49:31 GMT"/>
				<outline text="function getFile (options, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="10/2/22; 9:52:44 AM by DW" created="Sun, 02 Oct 2022 13:52:44 GMT">
							<outline text="If options.username and options.password are supplied, we add an auth section to the request. " created="Sun, 02 Oct 2022 13:52:45 GMT"/>
							</outline>
						<outline text="11/26/17; 10:14:08 AM by DW">
							<outline text="options elements">
								<outline text="repo"/>
								<outline text="repoPath"/>
								<outline text="userAgent -- optional"/>
								</outline>
							</outline>
						</outline>
					<outline text="var url = &quot;https://api.github.com/repos/&quot; + options.username + &quot;/&quot; + options.repo + &quot;/contents/&quot; + options.repoPath;"/>
					<outline text="var url = &quot;https://&quot; + username + &quot;:&quot; + options.password + &quot;@api.github.com/repos/&quot; + username + &quot;/&quot; + options.repo + &quot;/contents/&quot; + options.repoPath;" isComment="true"/>
					<outline text="var theRequest = {">
						<outline text="method: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="headers: {">
							<outline text="&quot;User-Agent&quot;: options.userAgent"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="" created="Sun, 02 Oct 2022 13:53:13 GMT"/>
					<outline text="if ((options.username !== undefined) &amp;&amp; (options.password !== undefined)) { //10/2/22 by DW" created="Sun, 02 Oct 2022 13:53:13 GMT">
						<outline text="theRequest.auth = {" created="Sun, 02 Oct 2022 13:53:32 GMT">
							<outline text="user: options.username,"/>
							<outline text="pass: options.password,"/>
							<outline text="sendImmediately: true"/>
							<outline text="};"/>
							</outline>
						<outline text="}" created="Sun, 02 Oct 2022 13:53:26 GMT"/>
						</outline>
					<outline text="" created="Sun, 02 Oct 2022 13:53:13 GMT"/>
					<outline text="request (theRequest, function (err, response, body) { ">
						<outline text="var jstruct = undefined;"/>
						<outline text="if (err) {">
							<outline text="console.log (&quot;davegithub.getFile: err.message == &quot; + err.message);"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;davegithub.getFile: response.statusCode == &quot; + response.statusCode);" isComment="true"/>
							<outline text="try {">
								<outline text="var jstruct = JSON.parse (body);"/>
								<outline text="if (callback !== undefined) {">
									<outline text="var buffer = Buffer.from (jstruct.content, &quot;base64&quot;); //work around deprecation warning -- 12/10/20 by DW"/>
									<outline text="var buffer = new Buffer (jstruct.content, &quot;base64&quot;); " isComment="true"/>
									<outline text="callback (undefined, buffer.toString (), jstruct);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;davegithub.getFile: err.message == &quot; + err.message);" isComment="true"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="" created="Sun, 02 Oct 2022 14:40:55 GMT"/>
				<outline text="function checkQueryQueue () { //10/1/22 by DW" created="Sat, 01 Oct 2022 15:23:52 GMT">
					<outline text="if (uploadQueue.length == 0) { //we can kill the thread" created="Sat, 01 Oct 2022 15:58:12 GMT">
						<outline text="let id = idQueueThread;" created="Sat, 01 Oct 2022 16:00:00 GMT"/>
						<outline text="idQueueThread = undefined;" created="Sat, 01 Oct 2022 15:59:09 GMT"/>
						<outline text="clearInterval (id);" created="Sat, 01 Oct 2022 15:58:52 GMT"/>
						<outline text="}" created="Sat, 01 Oct 2022 15:58:22 GMT"/>
						</outline>
					<outline text="else {" created="Sat, 01 Oct 2022 15:58:23 GMT">
						<outline text="if (ctCurrentUploads &lt; 1) {" created="Sat, 01 Oct 2022 15:24:09 GMT">
							<outline text="const jstruct = uploadQueue.shift ();"/>
							<outline text="ctCurrentUploads++;"/>
							<outline text="doUpload (jstruct.options, function (err, response, body) {" created="Sat, 01 Oct 2022 15:25:48 GMT">
								<outline text="ctCurrentUploads--;"/>
								<outline text="if (jstruct.callback !== undefined) {" created="Sat, 01 Oct 2022 15:27:45 GMT">
									<outline text="jstruct.callback (err, response, body);" created="Sat, 01 Oct 2022 15:27:57 GMT"/>
									<outline text="}" created="Sat, 01 Oct 2022 15:28:00 GMT"/>
									</outline>
								<outline text="});" created="Sat, 01 Oct 2022 15:27:27 GMT"/>
								</outline>
							<outline text="}" created="Sat, 01 Oct 2022 15:24:15 GMT"/>
							</outline>
						<outline text="}" created="Sat, 01 Oct 2022 15:58:25 GMT"/>
						</outline>
					<outline text="}" created="Sat, 01 Oct 2022 15:24:00 GMT"/>
					</outline>
				<outline text="function doUpload (options, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="10/1/22; 11:15:53 AM by DW" created="Sat, 01 Oct 2022 15:15:52 GMT">
							<outline text="New option -- flUseQueue, if true we make sure they run one after the other, because that's how the GH server likes it." created="Sat, 01 Oct 2022 15:15:54 GMT"/>
							</outline>
						<outline text="11/26/17; 11:02:42 AM by DW">
							<outline text="options elements">
								<outline text="username"/>
								<outline text="password"/>
								<outline text="repo"/>
								<outline text="repoPath"/>
								<outline text="data"/>
								<outline text="message -- optional, the checkin message"/>
								<outline text="committer -- optional, a struct with name and email of the committer"/>
								<outline text="userAgent -- optional"/>
								</outline>
							</outline>
						</outline>
					<outline text="var bodyStruct = { ">
						<outline text="message: options.message,"/>
						<outline text="committer: {">
							<outline text="name: options.committer.name,"/>
							<outline text="email: options.committer.email"/>
							<outline text="},"/>
							</outline>
						<outline text="content: Buffer.from (options.data).toString (&quot;base64&quot;)"/>
						<outline text="content: new Buffer (options.data).toString ('base64')" isComment="true"/>
						<outline text="content: new Buffer (options.data).toString ('base64')" isComment="true"/>
						<outline text="};"/>
						</outline>
					<outline text="getFile (options, function (err, data, jstruct) {">
						<outline text="var url = &quot;https://api.github.com/repos/&quot; + options.username + &quot;/&quot; + options.repo + &quot;/contents/&quot; + options.repoPath;"/>
						<outline text="if (jstruct !== undefined) {">
							<outline text="console.log (&quot;doUpload: file exists, jstruct.sha == &quot; + jstruct.sha + &quot;, url == &quot; + url);" isComment="true" created="Sun, 02 Oct 2022 13:37:57 GMT"/>
							<outline text="bodyStruct.sha = jstruct.sha;"/>
							<outline text="}"/>
							</outline>
						<outline text="var theRequest = {">
							<outline text="method: &quot;PUT&quot;,"/>
							<outline text="url: url,"/>
							<outline text="body: JSON.stringify (bodyStruct),"/>
							<outline text="auth: {">
								<outline text="user: options.username,"/>
								<outline text="pass: options.password,"/>
								<outline text="sendImmediately: true"/>
								<outline text="},"/>
								</outline>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: options.userAgent,"/>
								<outline text="&quot;Content-Type&quot;: options.type"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="console.log (&quot;uploadFile: theRequest == &quot; + utils.jsonStringify (theRequest));" isComment="true"/>
						<outline text="request (theRequest, function (err, response, body) { ">
							<outline text="if (err) {">
								<outline text="console.log (&quot;doUpload: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err, response, body);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startQueryQueue () {">
					<outline text="idQueueThread = setInterval (checkQueryQueue, 100); //every tenth second"/>
					<outline text="}"/>
					</outline>
				<outline text="function uploadFile (options, callback) { //10/1/22 by DW">
					<outline text="Changes" isComment="true">
						<outline text="10/1/22; 11:15:53 AM by DW" created="Sat, 01 Oct 2022 15:15:52 GMT">
							<outline text="New option -- flUseQueue, if true we make sure they run one after the other, because that's how the GH server likes it." created="Sat, 01 Oct 2022 15:15:54 GMT"/>
							</outline>
						<outline text="11/26/17; 11:02:42 AM by DW">
							<outline text="options elements">
								<outline text="username"/>
								<outline text="password"/>
								<outline text="repo"/>
								<outline text="repoPath"/>
								<outline text="data"/>
								<outline text="message -- optional, the checkin message"/>
								<outline text="committer -- optional, a struct with name and email of the committer"/>
								<outline text="userAgent -- optional"/>
								</outline>
							</outline>
						</outline>
					<outline text="if (options.flUseQueue) { //10/1/22 by DW" created="Sat, 01 Oct 2022 15:20:25 GMT">
						<outline text="if (idQueueThread === undefined) {" created="Sat, 01 Oct 2022 15:55:35 GMT">
							<outline text="startQueryQueue ();" created="Sat, 01 Oct 2022 15:55:48 GMT"/>
							<outline text="}" created="Sat, 01 Oct 2022 15:55:42 GMT"/>
							</outline>
						<outline text="uploadQueue.push ({options, callback});" created="Sat, 01 Oct 2022 15:22:00 GMT"/>
						<outline text="}" created="Sat, 01 Oct 2022 15:20:33 GMT"/>
						</outline>
					<outline text="else {" created="Sat, 01 Oct 2022 15:20:34 GMT">
						<outline text="doUpload (options, callback); //do it immediately" created="Sat, 01 Oct 2022 15:20:56 GMT"/>
						<outline text="}" created="Sat, 01 Oct 2022 15:20:36 GMT"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function getDirectory (options, path, callback) {">
					<outline text="Changes" isComment="true" created="Tue, 04 May 2021 15:18:57 GMT">
						<outline text="5/4/21; 11:19:00 AM by DW" created="Tue, 04 May 2021 15:18:59 GMT">
							<outline text="Added to package from repocontents test app." created="Tue, 04 May 2021 15:19:01 GMT"/>
							</outline>
						</outline>
					<outline text="function loadDirectory (theArray, parentpath, callback) {">
						<outline text="function nextFile (ix) {">
							<outline text="if (ix &lt; theArray.length) {">
								<outline text="var item = theArray [ix];"/>
								<outline text="if (item.type == &quot;dir&quot;) {">
									<outline text="getDirectory (options, item.path, function (err, jstruct) {">
										<outline text="if (jstruct !== undefined) { //no error">
											<outline text="item.subs = jstruct;"/>
											<outline text="}"/>
											</outline>
										<outline text="nextFile (ix + 1);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="nextFile (ix + 1);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback ();"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="nextFile (0);"/>
						<outline text="}"/>
						</outline>
					<outline text="if (utils.beginsWith (path, &quot;/&quot;)) {">
						<outline text="path = utils.stringDelete (path, 1, 1);"/>
						<outline text="}"/>
						</outline>
					<outline text="var theRequest = {">
						<outline text="method: &quot;GET&quot;,"/>
						<outline text="url: &quot;https://api.github.com/repos/&quot; + options.username + &quot;/&quot; + options.repo + &quot;/contents/&quot; + path,"/>
						<outline text="headers: {">
							<outline text="&quot;User-Agent&quot;: options.userAgent"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="console.log (&quot;getDirectory: path == &quot; + path);"/>
					<outline text="request (theRequest, function (err, response, body) { ">
						<outline text="if (err) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="try {">
								<outline text="var jstruct = JSON.parse (body);"/>
								<outline text="if (Array.isArray (jstruct)) { //it's a directory">
									<outline text="loadDirectory (jstruct, path, function () {">
										<outline text="callback (undefined, jstruct);"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="if (callback !== undefined) {">
										<outline text="callback (jstruct);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="if (callback !== undefined) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="example/example.js">
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const davegithub = require (&quot;davegithub&quot;); " isComment="true"/>
				<outline text="const davegithub = require (&quot;../davegithub.js&quot;);"/>
				<outline text=""/>
				<outline text="function getFileTest (callback) {">
					<outline text="const options = {">
						<outline text="username: &quot;scripting&quot;,"/>
						<outline text="repo: &quot;test1&quot;,"/>
						<outline text="repoPath: &quot;lyrics.txt&quot;,"/>
						<outline text="userAgent: &quot;Dave's Test GitHub Uploader&quot;"/>
						<outline text="};"/>
						</outline>
					<outline text="davegithub.getFile (options, function (err, data, jstruct) {">
						<outline text="if (err) {">
							<outline text="console.log (err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;getFileTest: data.length == &quot; + data.length);"/>
							<outline text="}"/>
							</outline>
						<outline text="callback ();"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function uploadFileTest () {">
					<outline text="const options = {">
						<outline text="username: &quot;scripting&quot;,"/>
						<outline text="repo: &quot;test1&quot;,"/>
						<outline text="repoPath: &quot;motto.txt&quot;,"/>
						<outline text="data: utils.getRandomSnarkySlogan (),"/>
						<outline text="type: &quot;text/plain&quot;,"/>
						<outline text="committer: {">
							<outline text="name: &quot;Dave Winer&quot;,"/>
							<outline text="email: &quot;dave.winer@gmail.com&quot;"/>
							<outline text="},"/>
							</outline>
						<outline text="message: &quot;Set the motto&quot;,"/>
						<outline text="userAgent: &quot;Dave's Test GitHub Uploader&quot;"/>
						<outline text="};"/>
						</outline>
					<outline text="fs.readFile (&quot;config.json&quot;, function (err, data) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;uploadFileTest: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="const config = JSON.parse (data);"/>
							<outline text="options.password = config.password;"/>
							<outline text="davegithub.uploadFile (options, function (err, response, body) {">
								<outline text="if (response !== undefined) {">
									<outline text="console.log (&quot;uploadFileTest: response.statusCode == &quot; + response.statusCode);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function uploadFileTestMp3 () {">
					<outline text="const options = {">
						<outline text="username: &quot;scripting&quot;,"/>
						<outline text="repo: &quot;test1&quot;,"/>
						<outline text="repoPath: &quot;song.mp3&quot;,"/>
						<outline text="committer: {">
							<outline text="name: &quot;Dave Winer&quot;,"/>
							<outline text="email: &quot;dave.winer@gmail.com&quot;"/>
							<outline text="},"/>
							</outline>
						<outline text="message: &quot;Test update&quot;,"/>
						<outline text="userAgent: &quot;Dave's Test GitHub Uploader&quot;"/>
						<outline text="};"/>
						</outline>
					<outline text=""/>
					<outline text="fs.readFile (&quot;song.mp3&quot;, function (err, mp3data) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;uploadFileTest: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="options.data = mp3data;"/>
							<outline text="options.type = &quot;audio/mp3&quot;;"/>
							<outline text="fs.readFile (&quot;config.json&quot;, function (err, data) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;uploadFileTest: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="const config = JSON.parse (data);"/>
									<outline text="options.password = config.password;"/>
									<outline text="davegithub.uploadFile (options, function () {">
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="getFileTest (function () {">
					<outline text="uploadFileTest ();"/>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="example/package.json">
				<outline text="{ ">
					<outline text="&quot;name&quot;: &quot;example&quot;, "/>
					<outline text="&quot;description&quot;: &quot;Test the davegithub package.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;example.js&quot;,"/>
					<outline text="&quot;scripts&quot;: {">
						<outline text="&quot;start&quot;: &quot;node example.js&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davegithub&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: { ">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="example/configvirgin.json">
				<outline text="{ ">
					<outline text="&quot;password&quot;: &quot;xxx&quot;"/>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="/scripting.com/code/testing/repocontents/">
			<outline text="package.json">
				<outline text="{ ">
					<outline text="&quot;name&quot;: &quot;repocontents&quot;, "/>
					<outline text="&quot;description&quot;: &quot;Code to get the contents of a respository.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.1&quot;,"/>
					<outline text="&quot;main&quot;: &quot;repocontents.js&quot;,"/>
					<outline text="&quot;scripts&quot;: {">
						<outline text="&quot;start&quot;: &quot;node repocontents.js&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davegithub&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: { ">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="repocontents.js">
				<outline text="const fs = require (&quot;fs&quot;); "/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const davegithub = require (&quot;davegithub&quot;);"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="username: &quot;scripting&quot;,"/>
					<outline text="repo: &quot;artDownloader&quot;,"/>
					<outline text="repo: &quot;test1&quot;," isComment="true"/>
					<outline text="committer: {">
						<outline text="name: &quot;Dave Winer&quot;,"/>
						<outline text="email: &quot;dave.winer@gmail.com&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="message: &quot;Nightly update&quot;,"/>
					<outline text="userAgent: &quot;Dave's OldSchool GitHub Uploader&quot;,"/>
					<outline text="};"/>
					</outline>
				<outline text="var config = {" isComment="true">
					<outline text="username: &quot;scripting&quot;,"/>
					<outline text="repo: &quot;Scripting-News&quot;,"/>
					<outline text="repo: &quot;test1&quot;," isComment="true"/>
					<outline text="committer: {">
						<outline text="name: &quot;Dave Winer&quot;,"/>
						<outline text="email: &quot;dave.winer@gmail.com&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="message: &quot;Nightly update&quot;,"/>
					<outline text="userAgent: &quot;Dave's OldSchool GitHub Uploader&quot;,"/>
					<outline text="};"/>
					</outline>
				<outline text=""/>
				<outline text="var whenstart = new Date ();"/>
				<outline text="fs.readFile (&quot;config.json&quot;, function (err, jsontext) {">
					<outline text="if (!err) {">
						<outline text="var jstruct = JSON.parse (jsontext);" created="Tue, 04 May 2021 15:31:16 GMT"/>
						<outline text="for (var x in jstruct) {" created="Tue, 04 May 2021 15:32:01 GMT">
							<outline text="config [x] = jstruct [x];" created="Tue, 04 May 2021 15:32:06 GMT"/>
							<outline text="}" created="Tue, 04 May 2021 15:32:13 GMT"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="davegithub.getDirectory (config, &quot;/data/images/&quot;, function (err, jstruct) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var jsontext = utils.jsonStringify (jstruct);"/>
							<outline text="console.log (&quot;jstruct == &quot; + jsontext);" isComment="true"/>
							<outline text=""/>
							<outline text="console.log (utils.secondsSince (whenstart) + &quot; secs.&quot;);"/>
							<outline text=""/>
							<outline text="fs.writeFile (&quot;tree.json&quot;, jsontext, function () {">
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="});"/>
					</outline>
				<outline text="" created="Tue, 04 May 2021 15:28:54 GMT"/>
				<outline text="" created="Tue, 04 May 2021 15:28:54 GMT"/>
				</outline>
			</outline>
		<outline text="/fargo.io/code/davegithub/" isComment="true">
			<outline text="davegithub.js">
				<outline text="var myVersion = &quot;0.5.0&quot;, myProductName = &quot;davegithub&quot;;  " created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text=""/>
				<outline text="exports.getFile = getFile; "/>
				<outline text="exports.uploadFile = uploadFile; "/>
				<outline text="exports.getFilesInDirectory = getFilesInDirectory; "/>
				<outline text=""/>
				<outline text="function getFile (options, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="11/26/17; 10:14:08 AM by DW">
							<outline text="options elements">
								<outline text="repo"/>
								<outline text="repoPath"/>
								<outline text="userAgent -- optional"/>
								</outline>
							</outline>
						</outline>
					<outline text="var url = &quot;https://api.github.com/repos/&quot; + options.username + &quot;/&quot; + options.repo + &quot;/contents/&quot; + options.repoPath;"/>
					<outline text="var url = &quot;https://&quot; + username + &quot;:&quot; + options.password + &quot;@api.github.com/repos/&quot; + username + &quot;/&quot; + options.repo + &quot;/contents/&quot; + options.repoPath;" isComment="true"/>
					<outline text="var theRequest = {">
						<outline text="method: &quot;GET&quot;,"/>
						<outline text="url: url,"/>
						<outline text="headers: {">
							<outline text="&quot;User-Agent&quot;: options.userAgent"/>
							<outline text="}"/>
							</outline>
						<outline text="};"/>
						</outline>
					<outline text="request (theRequest, function (err, response, body) { ">
						<outline text="var jstruct = undefined;"/>
						<outline text="if (err) {">
							<outline text="console.log (&quot;davegithub.getFile: err.message == &quot; + err.message);" isComment="true"/>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;davegithub.getFile: response.statusCode == &quot; + response.statusCode);" isComment="true"/>
							<outline text="try {">
								<outline text="var jstruct = JSON.parse (body);"/>
								<outline text="if (callback !== undefined) {">
									<outline text="if (jstruct.content === undefined) {">
										<outline text="callback (undefined, undefined, jstruct);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var buffer = new Buffer (jstruct.content, &quot;base64&quot;); "/>
										<outline text="callback (undefined, buffer.toString (), jstruct);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;davegithub.getFile: err.message == &quot; + err.message);" isComment="true"/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function uploadFile (options, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="11/26/17; 11:02:42 AM by DW">
							<outline text="options elements">
								<outline text="username"/>
								<outline text="password"/>
								<outline text="repo"/>
								<outline text="repoPath"/>
								<outline text="data"/>
								<outline text="message -- optional, the checkin message"/>
								<outline text="committer -- optional, a struct with name and email of the committer"/>
								<outline text="userAgent -- optional"/>
								</outline>
							</outline>
						</outline>
					<outline text="var bodyStruct = { ">
						<outline text="message: options.message,"/>
						<outline text="committer: {">
							<outline text="name: options.committer.name,"/>
							<outline text="email: options.committer.email"/>
							<outline text="},"/>
							</outline>
						<outline text="content: new Buffer (options.data).toString ('base64')"/>
						<outline text="};"/>
						</outline>
					<outline text="getFile (options, function (err, data, jstruct) {">
						<outline text="if (jstruct !== undefined) {">
							<outline text="bodyStruct.sha = jstruct.sha;"/>
							<outline text="}"/>
							</outline>
						<outline text="var username = options.username;"/>
						<outline text="var url = &quot;https://&quot; + username + &quot;:&quot; + options.password + &quot;@api.github.com/repos/&quot; + username + &quot;/&quot; + options.repo + &quot;/contents/&quot; + options.repoPath;"/>
						<outline text="var theRequest = {">
							<outline text="method: &quot;PUT&quot;,"/>
							<outline text="url: url,"/>
							<outline text="body: JSON.stringify (bodyStruct),"/>
							<outline text="headers: {">
								<outline text="&quot;User-Agent&quot;: options.userAgent,"/>
								<outline text="&quot;Content-Type&quot;: options.type"/>
								<outline text="}"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="request (theRequest, function (err, response, body) { ">
							<outline text="if (err) {">
								<outline text="console.log (&quot;uploadFile: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {" isComment="true">
								<outline text="console.log (&quot;uploadFile: response.statusCode == &quot; + response.statusCode);"/>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err, response, body);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function getFilesInDirectory (options, callback) {">
					<outline text="console.log (&quot;getFilesInDirectory: options == &quot; + utils.jsonStringify (options));"/>
					<outline text="if (utils.beginsWith (options.repoPath, &quot;/&quot;)) {">
						<outline text="options.repoPath = utils.stringDelete (options.repoPath, 1, 1);"/>
						<outline text="}"/>
						</outline>
					<outline text="getFile (options, function (err, data, jstruct) {">
						<outline text="if (err) {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (callback !== undefined) {">
								<outline text="callback (err, data, jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text=""/>
				</outline>
			<outline text="package.json">
				<outline text="{ ">
					<outline text="&quot;name&quot;: &quot;davegithub&quot;, "/>
					<outline text="&quot;description&quot;: &quot;Read and write files to a GitHub repository.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.2&quot;,"/>
					<outline text="&quot;main&quot;: &quot;davegithub.js&quot;,"/>
					<outline text="&quot;scripts&quot;: {">
						<outline text="&quot;start&quot;: &quot;node davegithub.js&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot; : &quot;git&quot;,"/>
						<outline text="&quot;url&quot; : &quot;https://github.com/scripting/github.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: { ">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="# github"/>
				<outline text="Read and write files to a GitHub repository."/>
				</outline>
			<outline text="example/example.js">
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const davegithub = require (&quot;davegithub&quot;); " isComment="true"/>
				<outline text="const davegithub = require (&quot;../davegithub.js&quot;);"/>
				<outline text=""/>
				<outline text="function getFileTest (callback) {">
					<outline text="const options = {">
						<outline text="username: &quot;scripting&quot;,"/>
						<outline text="repo: &quot;test1&quot;,"/>
						<outline text="repoPath: &quot;lyrics.txt&quot;,"/>
						<outline text="userAgent: &quot;Dave's Test GitHub Uploader&quot;"/>
						<outline text="};"/>
						</outline>
					<outline text="davegithub.getFile (options, function (err, data, jstruct) {">
						<outline text="if (err) {">
							<outline text="console.log (err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;getFileTest: data == &quot; + data);"/>
							<outline text="}"/>
							</outline>
						<outline text="callback ();"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function getTreeTest (callback) {">
					<outline text="const options = {">
						<outline text="username: &quot;scripting&quot;,"/>
						<outline text="repo: &quot;test1&quot;,"/>
						<outline text="repoPath: &quot;/blog&quot;,"/>
						<outline text="userAgent: &quot;Dave's Test GitHub Uploader&quot;"/>
						<outline text="};"/>
						</outline>
					<outline text="davegithub.getFilesInDirectory (options, function (err, data, jstruct) {">
						<outline text="if (err) {">
							<outline text="console.log (err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (&quot;getTreeTest: data == &quot; + data);"/>
							<outline text="}"/>
							</outline>
						<outline text="callback ();"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function uploadFileTest () {">
					<outline text="const options = {">
						<outline text="username: &quot;scripting&quot;,"/>
						<outline text="repo: &quot;test1&quot;,"/>
						<outline text="repoPath: &quot;motto.txt&quot;,"/>
						<outline text="data: &quot;It's even worse than it appears.&quot;,"/>
						<outline text="type: &quot;text/plain&quot;,"/>
						<outline text="committer: {">
							<outline text="name: &quot;Dave Winer&quot;,"/>
							<outline text="email: &quot;dave.winer@gmail.com&quot;"/>
							<outline text="},"/>
							</outline>
						<outline text="message: &quot;Set the motto&quot;,"/>
						<outline text="userAgent: &quot;Dave's Test GitHub Uploader&quot;"/>
						<outline text="};"/>
						</outline>
					<outline text="fs.readFile (&quot;config.json&quot;, function (err, data) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;uploadFileTest: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="const config = JSON.parse (data);"/>
							<outline text="options.password = config.password;"/>
							<outline text="davegithub.uploadFile (options, function (err, response, body) {">
								<outline text="console.log (&quot;uploadFileTest: response.statusCode == &quot; + response.statusCode);"/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function uploadFileTestMp3 () {">
					<outline text="const options = {">
						<outline text="username: &quot;scripting&quot;,"/>
						<outline text="repo: &quot;test1&quot;,"/>
						<outline text="repoPath: &quot;song.mp3&quot;,"/>
						<outline text="committer: {">
							<outline text="name: &quot;Dave Winer&quot;,"/>
							<outline text="email: &quot;dave.winer@gmail.com&quot;"/>
							<outline text="},"/>
							</outline>
						<outline text="message: &quot;Test update&quot;,"/>
						<outline text="userAgent: &quot;Dave's Test GitHub Uploader&quot;"/>
						<outline text="};"/>
						</outline>
					<outline text=""/>
					<outline text="fs.readFile (&quot;song.mp3&quot;, function (err, mp3data) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;uploadFileTest: err.message == &quot; + err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="options.data = mp3data;"/>
							<outline text="options.type = &quot;audio/mp3&quot;;"/>
							<outline text="fs.readFile (&quot;config.json&quot;, function (err, data) {">
								<outline text="if (err) {">
									<outline text="console.log (&quot;uploadFileTest: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="const config = JSON.parse (data);"/>
									<outline text="options.password = config.password;"/>
									<outline text="davegithub.uploadFile (options, function () {">
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text=""/>
					<outline text=""/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="getTreeTest (function () {">
					<outline text="getFileTest (function () {">
						<outline text="uploadFileTest ();"/>
						<outline text="});"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="example/package.json">
				<outline text="{ ">
					<outline text="&quot;name&quot;: &quot;example&quot;, "/>
					<outline text="&quot;description&quot;: &quot;Test the davegithub package.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@smallpicture.com&gt;&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;example.js&quot;,"/>
					<outline text="&quot;scripts&quot;: {">
						<outline text="&quot;start&quot;: &quot;node example.js&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davegithub&quot;: &quot;*&quot;"/>
						<outline text="}, "/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;engines&quot;: { ">
						<outline text="&quot;node&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="example/configvirgin.json">
				<outline text="{ ">
					<outline text="&quot;password&quot;: &quot;xxx&quot;"/>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildDaveGithub ()"/>
			</outline>
		</body>
	</opml>
